/*
 * Authenticator.h
 *
 * SRP-6a based mutual authenticator
 *
 *
 * Copyright (C) 2018 Amit Kumar (amitkriit@gmail.com)
 * This program is part of the Wanhive IoT Platform.
 * Check the COPYING file for the license.
 *
 */

#ifndef WH_UTIL_AUTHENTICATOR_H_
#define WH_UTIL_AUTHENTICATOR_H_
#include "../base/ds/State.h"
#include "../base/security/Srp.h"

namespace wanhive {
/**
 * SRP-6a based authenticator
 * Ref: http://srp.stanford.edu/design.html
 */
class Authenticator: public State, private Srp {
public:
	Authenticator(bool isHost = false) noexcept;
	virtual ~Authenticator();
	/*
	 * STEP 1: User -> Host:  I, A = g^a (identifies self, a = random number)
	 * Host:  B = kv + g^b
	 * Host:  u = H(A, B)
	 * Host:  load s and v
	 * Host:  S = (Av^u) ^ b (computes session key)
	 * Host:  K = H(S)
	 * Host: calculate M
	 * Returns true if the identity is established.
	 */
	bool identify(unsigned long long identity, const unsigned char *nonce,
			unsigned int nonceLength, const char *salt,
			const char *verifier) noexcept;
	/*
	 * STEP 2: Host -> User:  s, B = kv + g^b (sends salt and nonce, b = random number)
	 * User:  u = H(A, B)
	 * User:  x = H(s, p)                 (user enters password)
	 * User:  S = (B - kg^x) ^ (a + ux)   (computes session key)
	 * User:  K = H(S)
	 * User: calculate M
	 */
	bool createIdentity(unsigned long long identity,
			const unsigned char *password, unsigned int passwordLength,
			const unsigned char *salt, unsigned int saltLength,
			const unsigned char *nonce, unsigned int nonceLength,
			unsigned int rounds = 1) noexcept;
	/*
	 * STEP 3: User -> Host:  M
	 * Host: verifies M
	 */
	bool authenticateUser(const unsigned char *proof,
			unsigned int length) noexcept;
	/*
	 * STEP 4: Host -> User: H(AMK)
	 * User: verifies H(AMK)
	 */
	bool authenticateHost(const unsigned char *proof,
			unsigned int length) noexcept;
	/*
	 * Host: returns true if the most recent STEP 3 succeeded
	 * User: returns true if the most recent STEP 4 succeeded
	 */
	bool isAuthenticated() const noexcept;
	/*
	 * Host: If STEP 1 succeeded then the returned value contains the identity of
	 * the Client which initiated the request.
	 */
	unsigned long long getIdentity() const noexcept;
	/*
	 * User: generates the user nonce A (preparation for STEP 1)
	 * Host: returns the host nonce generated during STEP 1 (preparation for STEP 2, always succeeds)
	 */
	bool generateNonce(const unsigned char *&binary,
			unsigned int &bytes) noexcept;
	/*
	 * Host: returns the M generated during STEP 1 (always succeeds)
	 * User: returns the M generated during STEP 2 (preparation for STEP 3, always succeeds)
	 */
	bool generateUserProof(const unsigned char *&binary,
			unsigned int &bytes) noexcept;
	/*
	 * Host: returns the AMK generated during STEP 1 (preparation for STEP 4, always succeeds)
	 * User: returns the AMK generated during STEP 2 (always succeeds)
	 */
	bool generateHostProof(const unsigned char *&binary,
			unsigned int &bytes) noexcept;
	/*
	 * Host: returns the salt generated after STEP 1 (Preparation for STEP 2)
	 * User: returns the salt received in STEP 2
	 * General: returns the random salt generated by Authenticator::generateVerifier
	 */
	void getSalt(const unsigned char *&binary, unsigned int &bytes) noexcept;
	/*
	 * General: returns the verifier generated by Authenticator::generateVerifier
	 */
	void getPasswordVerifier(const unsigned char *&binary,
			unsigned int &bytes) noexcept;
	/*
	 * General: computes a random salt and password verifier
	 * s is chosen randomly
	 * x = H(s, p)
	 * v = g^x (computes password verifier)
	 */
	bool generateVerifier(const char *identity, const unsigned char *password,
			unsigned int passwordLength, unsigned int rounds) noexcept;
	/*
	 * Host: generate fake nonce during STEP 1 to obfuscate failed identification
	 */
	void generateFakeNonce(const unsigned char *&binary,
			unsigned int &bytes) noexcept;
	/*
	 * Host: generate fake salt during STEP 1 to obfuscate failed identification
	 * NOTE: <s> and <sLength> are value-result argument
	 */
	void generateFakeSalt(unsigned long long identity, const unsigned char *&s,
			unsigned int &sLength) noexcept;
private:
	unsigned long long id;
	bool isHost;
	bool authenticated;
};

} /* namespace wanhive */

#endif /* WH_UTIL_AUTHENTICATOR_H_ */
